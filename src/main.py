from PIL import Image
from lib.image_hadler import ImageHandler
import os
import io
from dotenv import load_dotenv
import logging
import asyncio

from aiogram.utils import executor
from aiogram import Bot, Dispatcher, types
from aiogram.types import ContentType
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton

from telethon import TelegramClient, events
from telethon.tl.types import InputMessagesFilterPhotos
from telethon.tl.types import InputPeerChat
from telethon import types as telethon_types

from pathlib import Path

load_dotenv()

logging.basicConfig(level=logging.INFO)
API_TOKEN = os.getenv('TOKEN')
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")

chats = {}

HELP_COMMAND = """
<b>/start</b> - <i>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–∞—Ç</i>
<b>/help</b> - <i>–í—ã–≤–µ–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è</i>
<b>/image <u>description [count]</u></b> - <i>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é</i>
<b>/auth</b> - <i>–ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞</i>
<b>/get_history</b> - <i>–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞</i>
<b>/disconnect</b> - <i>–ü—Ä–æ—Ü–µ—Å—Å –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞</i>
"""

# in the future, if I wouldn't be lazy :), I will fix this strange duplicated keyboards

keyboard_phone = InlineKeyboardMarkup()
keyboard_code = InlineKeyboardMarkup()

buttons_numbers_emoji_phone = [['1Ô∏è‚É£', 'p1'], ['2Ô∏è‚É£', 'p2'], ['3Ô∏è‚É£', 'p3'], ['4Ô∏è‚É£', 'p4'], ['5Ô∏è‚É£', 'p5'], ['6Ô∏è‚É£', 'p6'],
                               ['7Ô∏è‚É£', 'p7'], ['8Ô∏è‚É£', 'p8'], ['9Ô∏è‚É£', 'p9']]

buttons_numbers_emoji_code = [['1Ô∏è‚É£', 'c1'], ['2Ô∏è‚É£', 'c2'], ['3Ô∏è‚É£', 'c3'], ['4Ô∏è‚É£', 'c4'], ['5Ô∏è‚É£', 'c5'], ['6Ô∏è‚É£', 'c6'],
                              ['7Ô∏è‚É£', 'c7'], ['8Ô∏è‚É£', 'c8'], ['9Ô∏è‚É£', 'c9']]

buttons_special_emoji = ["üîÑ", "0Ô∏è‚É£", "‚§¥Ô∏è", "‚ûï"]

for i in range(0, len(buttons_numbers_emoji_code), 3):
    keyboard_phone.row(
        InlineKeyboardButton(buttons_numbers_emoji_phone[i][0], callback_data=buttons_numbers_emoji_phone[i][1]),
        InlineKeyboardButton(buttons_numbers_emoji_phone[i + 1][0],
                             callback_data=buttons_numbers_emoji_phone[i + 1][1]),
        InlineKeyboardButton(buttons_numbers_emoji_phone[i + 2][0],
                             callback_data=buttons_numbers_emoji_phone[i + 2][1]))
    keyboard_code.row(
        InlineKeyboardButton(buttons_numbers_emoji_code[i][0], callback_data=buttons_numbers_emoji_code[i][1]),
        InlineKeyboardButton(buttons_numbers_emoji_code[i + 1][0],
                             callback_data=buttons_numbers_emoji_code[i + 1][1]),
        InlineKeyboardButton(buttons_numbers_emoji_code[i + 2][0],
                             callback_data=buttons_numbers_emoji_code[i + 2][1]))

keyboard_phone.row(InlineKeyboardButton(buttons_special_emoji[0], callback_data="preset"),
                   InlineKeyboardButton(buttons_special_emoji[1], callback_data="p0"),
                   InlineKeyboardButton(buttons_special_emoji[2], callback_data="psend"))

keyboard_code.row(InlineKeyboardButton(buttons_special_emoji[0], callback_data="creset"),
                  InlineKeyboardButton(buttons_special_emoji[1], callback_data="c0"),
                  InlineKeyboardButton(buttons_special_emoji[2], callback_data="csend"))

keyboard_phone.row(InlineKeyboardButton(buttons_special_emoji[3], callback_data="c+"))


def init_chat(id):
    chats[id] = {"image_handler": ImageHandler()}


async def download_image_aio(file_id):
    file = await bot.get_file(file_id)
    file_bytes = io.BytesIO()
    await file.download(destination=file_bytes)
    return file_bytes.getvalue()


async def download_images_aio(file_ids):
    tasks = [download_image_aio(file_id) for file_id in file_ids]
    return await asyncio.gather(*tasks)


async def process_images_aio(file_ids, chat_id):
    image_bytes = await download_images_aio(file_ids)
    for j in range(len(file_ids)):
        image = Image.open(io.BytesIO(image_bytes[j]))
        chats[chat_id]["image_handler"].process_image(image, file_ids[j], "a")


async def process_image_command(message: types.Message):
    args = message.get_args()
    if args == "":
        await message.reply("–®–µ—Ä–ª–æ–∫—É –Ω—É–∂–Ω–∞ –≤–∞—à–∞ —É–ª–∏–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    parts = args.rsplit(" ", 1)
    if len(parts) == 1 or not (parts[-1].isdigit()):
        image_text = args
        count = 1
    else:
        image_text = parts[0]
        count = int(parts[1])

    images_id = chats[message.chat.id]["image_handler"].get_images(image_text, count)
    for (image_id, api_image) in images_id:
        try:
            if api_image == "a":
                await bot.send_photo(chat_id=message.chat.id, photo=image_id)
            elif api_image == "t":
                msg = await chats[message.chat.id]["client"].get_messages(message.chat.id, ids=image_id)
                photo_bytes = await chats[message.chat.id]["client"].download_media(msg.photo, bytes)
                await bot.send_photo(chat_id=message.chat.id, photo=photo_bytes)
            else:
                _ = 1 / 0
        except:
            await bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫—Ç–æ-—Ç–æ –ø–æ–¥—Ç—ë—Ä —É–ª–∏–∫–∏, –ø–æ—ç—Ç–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã–ª–æ –ø–æ—Ç–µ—Ä—è–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫, –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ /start')


@dp.message_handler(commands=["image"])
async def process_image_command_handler(message: types.Message):
    await process_image_command(message)


@dp.message_handler(content_types=["photo"])
async def handle_photos(message: types.Message):
    await process_images_aio([message.photo[-1].file_id], message.chat.id)


@dp.message_handler(commands=["get_history"])
async def get_history_handler(message: types.Message):
    if message.chat.id in chats:
        if "client" in chats[message.chat.id]:
            client = chats[message.chat.id]["client"]
            if await client.is_user_authorized():
                me = await client.get_me()
                count = 0
                if me is not None and me.bot:
                    await bot.send_message(message.chat.id, '–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –±–æ—Ç—è—Ä–∞, –ø—Ä–æ–ø—É—Å–∫ –∫ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω!')
                else:

                    async for msg in client.iter_messages(message.chat.id, filter=InputMessagesFilterPhotos):
                        count += 1
                        photo_bytes = await client.download_media(msg.photo, bytes)
                        image = Image.open(io.BytesIO(photo_bytes))
                        chats[message.chat.id]["image_handler"].process_image(image, msg.id, "t")

                    await bot.send_message(message.chat.id, f'–£—Å–ø–µ—Ö! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.')
            else:
                await bot.send_message(message.chat.id, '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!')
        else:
            await bot.send_message(message.chat.id, '–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ä—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∞—Ç–∞!')
    else:
        await bot.send_message(message.chat.id, '–ß–∞—Ç –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –¥–∞–∂–µ :)')


@dp.message_handler(commands=["disconnect"])
async def disconnect_handler(message: types.Message):
    if message.chat.id in chats:
        if "client" in chats[message.chat.id]:
            client = chats[message.chat.id]["client"]
            client.disconnect()
            await bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏!')
        else:
            await bot.send_message(message.chat.id, '–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ä—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∞—Ç–∞!')
        chats[message.chat.id] = {}
    else:
        await bot.send_message(message.chat.id, '–ß–∞—Ç –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –¥–∞–∂–µ :)')


@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    init_chat(message.chat.id)
    await bot.send_message(chat_id=message.chat.id, text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!')


@dp.message_handler(commands=["help"])
async def help_handler(message: types.Message):
    await message.reply(text=HELP_COMMAND, parse_mode='HTML')


@dp.message_handler(commands=['auth'])
async def auth_handler(message: types.Message):
    chat_id = message.chat.id

    if chat_id in chats:
        chats[chat_id]["phone"] = ""
        chats[chat_id]["client"] = TelegramClient(f"src/{chat_id}", API_ID, API_HASH, system_version="4.16.30-vxCUSTOM")
        await chats[chat_id]["client"].connect()
    else:
        await message.reply('–ë–æ—Ç –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π —á–∞—Ç')

    if await chats[chat_id]["client"].is_user_authorized():
        await bot.send_message(chat_id=message.chat.id, text='–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–ø—É—Å–∫–∞!')
    else:
        await bot.send_message(chat_id=message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', reply_markup=keyboard_phone)


@dp.callback_query_handler(lambda c: True)
async def process_callback_button(callback_query: types.CallbackQuery):
    button = callback_query.data
    chat_id = callback_query.message.chat.id
    state = "phone" if button[0] == "p" else "code"
    if button[1:] == "reset":
        chats[chat_id][state] = ""
        await bot.answer_callback_query(callback_query.id, text='–í—ã–ø–æ–ª–Ω–µ–Ω —Å–±—Ä–æ—Å')
    elif button[1:] == "send":
        if state == "phone":
            try:
                await chats[chat_id]["client"].send_code_request(chats[chat_id]["phone"])
                await bot.answer_callback_query(callback_query.id,
                                                text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—ã–ª –ø–æ–ª—É—á–µ–Ω, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                await bot.delete_message(chat_id=callback_query.message.chat.id,
                                         message_id=callback_query.message.message_id)
                chats[chat_id]["code"] = ""
                await bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:', reply_markup=keyboard_code)
            except:
                await bot.delete_message(chat_id=callback_query.message.chat.id,
                                         message_id=callback_query.message.message_id)
                await bot.answer_callback_query(callback_query.id,
                                                text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π")
        else:
            try:
                code = chats[chat_id]["code"]
                await chats[chat_id]["client"].sign_in(chats[chat_id]["phone"], code)
                chats[chat_id]["client"].session.save()
                await bot.answer_callback_query(callback_query.id, text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')
                await bot.delete_message(chat_id=callback_query.message.chat.id,
                                         message_id=callback_query.message.message_id)
            except:
                await bot.delete_message(chat_id=callback_query.message.chat.id,
                                         message_id=callback_query.message.message_id)
                await bot.answer_callback_query(callback_query.id,
                                                text="–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π")

    elif button[1:] in "+0123456789":
        chats[chat_id][state] = chats[chat_id][state] + button[1:]
        await bot.answer_callback_query(callback_query.id)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)